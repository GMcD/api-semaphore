# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    # Permissions, for Google Auth
    permissions:
      contents: "read"
      id-token: "write"

    # Service containers to run with `container-job`
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_HOST: postgres
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      # Auth with the GCloud Service Key
      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCLOUD_SERVICE_KEY }}"

      # Setup GCloud
      - name: Configure GCloud
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          version: ">= 470.0.0"

      # Report GCloud Info
      - name: "Check GCloud CLI"
        run: "gcloud info"

      # Setup Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      # Build the Module
      - name: Build
        run: go build -v ./...

      # Test Local
      - name: Local Test
        run: go test -v ./...
        env:
          PGPASSWORD: postgres

      # Setup Env for Container and Release
      - name: "Set Environment"
        run: |-
          echo "GCR_NAME=${{ vars.REPOSITORY }}/${{ vars.IMAGE_NAME }}:${{ github.run_number }}" >> ${GITHUB_ENV}
          echo "RELEASE_NAME=${{ vars.IMAGE_NAME }}-${GITHUB_SHA::7}-${GITHUB_RUN_NUMBER}" >> ${GITHUB_ENV}

      # Build and Tag Container for GCR
      - name: Container Build
        run: |
          docker build -t ${{ env.GCR_NAME }} .

      - name: Container Test
        uses: ./.github/actions
        id: container
        with:
          who-to-greet: "Gary MacDonald"
          mode: test
        env:
          PGUSER: postgres
          PGPASSWORD: postgres

      # Configure /home/runner/.docker/config.json - Deprecate?
      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker # --quiet
          gcloud auth configure-docker ${{ vars.REPOSITORY }} # --quiet

      # tag docker image to gcr image format then push to gcr
      - name: Push Docker Image to GCR
        run: |-
          docker image ls | head -2 | tail -1
          gcloud version
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin ${{ vars.REPOSITORY }}
          docker push ${{ env.GCR_NAME }}

      # Create a Release
      - name: "Create Cloud Deploy Release"
        uses: "google-github-actions/create-cloud-deploy-release@v0"
        with:
          delivery_pipeline: ${{ vars.IMAGE_NAME }}
          name: "${{ env.RELEASE_NAME }}"
          region: "${{ env.REGION }}"
          description: "${{ env.GITHUB_COMMIT_MSG }}"
          skaffold_file: "config/skaffold.yaml"
          images: "app=${{ env.GCR_NAME }}"

      # Upload Build Artifacts to Github - Deprecate
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.IMAGE_NAME }}-${{ github.run_number }}
          path: ${{ github.workspace }}

      # Use the output from the `container` step
      - name: Container Build Output
        run: echo "The time was ${{ steps.container.outputs.time }}"
